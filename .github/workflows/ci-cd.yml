name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: stocker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Setup database
        working-directory: backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/stocker_test
        run: npx prisma migrate deploy
      
      - name: Run tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/stocker_test
        run: npm run test
      
      - name: Type check
        working-directory: backend
        run: npm run type-check
      
      - name: Lint
        working-directory: backend
        run: npm run lint

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run tests
        working-directory: frontend
        run: npm run test
      
      - name: Build
        working-directory: frontend
        run: npm run build
      
      - name: Type check
        working-directory: frontend
        run: npm run type-check
      
      - name: Lint
        working-directory: frontend
        run: npm run lint

  python-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: analysis
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        working-directory: analysis
        run: pytest

  e2e-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: stocker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Setup database
        working-directory: backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/stocker_test
        run: npx prisma migrate deploy
      
      - name: Run E2E tests
        working-directory: frontend
        run: npm run test:e2e

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Audit backend
        working-directory: backend
        run: npm audit --audit-level=moderate || true
      
      - name: Audit frontend
        working-directory: frontend
        run: npm audit --audit-level=moderate || true
